{"version":3,"sources":["reducers/dataReducer.js","reducers/index.js","actions/types.js","store.js","actions/dataActions.js","components/EnterID.js","components/HomePage.js","items/Slider.js","items/StaticText.js","items/NormalCurveSurvey.jsx","items/Histogram.js","components/Experiment.js","components/Success.js","components/PreviewEnterID.js","components/PreviewExpt.js","components/PreviewSuccess.js","App.js","serviceWorker.js","index.js"],"names":["initialState","dbInfo","exptToDisplay","participantID","questionKeys","numQ","Number","isFinalQ","answer","fileContent","combineReducers","expt","state","action","type","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","storeDBInfo","which_database","which_collection","dispatch","db","col","getExpt","which_db","study_name","expt_name","API_URL","axios","get","then","res","experiments","data","thisExpt","forEach","element","exptName","storePartID","part_id","sendExpt","which_col","dataToPOST","post","storeQKeys","keys","setNumQ","num","is","storeAnswer","question","que","ans","EnterID","props","ParticipantID","onChange","bind","showExpt","this","getData","username","match","params","studyExpt","studyName","split","e","setState","target","name","value","allKeys","Object","console","log","filter","str","charAt","length","history","push","className","onClick","Component","connect","HomePage","Slider","resetState","onSubmit","showSlider","childRef","setWhichItem","undefined","min","lowRange","max","highRange","sliderCSVKey","submitted","style","color","StaticText","showItem","width","margin","textAlign","text","imageURLs","Images","sth","src","map","imag","padding","parsedLink","display","flexDirection","justifyContent","alignItems","flexWrap","NormalCurveSurvey","sliderRef","React","createRef","rectRef","svgRef","areaRef","lengthRef","startPos1Ref","startPos2Ref","tagRef1","tagRef2","dotReturn","curveArea","triMouseDown","triDrag","triUp","svgColReturn","updateTag1","updateTag2","displayTag1","displayTag2","hideTag1","hideTag2","returnTri1","returnTri2","noAnswer","questionNCKey","key1","graph1legend","key2","graph2legend","col11","col21","current","innerHTML","xPos","yPos","xPosOrig","CX","distancing1","distancing","circRad","maxLength","CY","ceilDist","onMouseEnter","onMouseLeave","onMouseMove","stroke","color1","fill","fillOpacity","strokeOpacity","cx","cy","r","distancing2","color2","fixCurve1","points","triCent1","onMouseDown","fixCurve2","triCent2","dragger","distFromCent","variance","triCentCol1","variance1","triCentCol2","variance2","svg","pt","createSVGPoint","x","clientX","svgP","matrixTransform","getScreenCTM","inverse","preventDefault","mousePointerRange","Math","round","axisStart","colRelative","edgeLim","axisStartCol","col22","len2","axisEndCol","endCol","col12","len1","svgPre","ptPre","svgPPre","prevState","triDown","cols","svgColPlacement","overlapVals","abs","y","clientY","elem","top","left","onMouseUp","questionNC","svgWidth","height","svgHeight","ref","Array","colValHeiS","row","colValHeiS2","dotReturn2","axisEnd","tickNum","tick","tickDist","textAnchor","lowVal","rangeVal","text-anchor","colNum","class","backgroundColor","graph1","graph2","unitHeight","ceil","colNumInit","internalLength","edgeCol","edgeLength","axisWidth","startPos1","colNumVal","startPos2","axisLength","parseInt","isDown","rectX","down","svgX","colLim1","colLim2","showCoors","Histogram","graphRef","qRef","minRef","maxRef","drawChart","questionHistKey","sliderPos","histData","d3","append","attr","selectAll","enter","d","i","vertAlign","questionHist","position","histLowRange","histHighRange","step","checked","minVal","maxVal","Experiment","whichItem","onNextQuestion","onFinalSubmit","whichSubmit","alert","nextQ","toString","childSlider","nextQuestion","childNormalCurve","childStaticText","itemName","key","qKey","includes","dataFileName","dataFileContent","fileName","histFileContent","childHistogram","participant","displayExpt","Success","finalObj","entry","condition","link","href","PreviewEnterID","PreviewExpt","PreviewSuccess","require","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4aa77efb.chunk.js","sourcesContent":["import {\r\n  DB_INFO,\r\n  GET_EXPT,\r\n  PART_ID,\r\n  Q_KEYS,\r\n  NUM_Q,\r\n  FINAL_Q,\r\n  ANSWER,\r\n  ITEM_DATA\r\n} from \"../actions/types\";\r\nimport { act } from \"react-dom/test-utils\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nconst initialState = {\r\n  dbInfo: {},\r\n  exptToDisplay: {},\r\n  participantID: '',\r\n  questionKeys: [],\r\n  numQ: Number,\r\n  isFinalQ: false,\r\n  answer: [],\r\n  fileContent: {}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case DB_INFO:\r\n      return {\r\n        ...state,\r\n        dbInfo: action.payload\r\n      };\r\n    case GET_EXPT:\r\n      return {\r\n        ...state,\r\n        exptToDisplay: action.payload\r\n      };\r\n    case PART_ID:\r\n      return {\r\n        ...state,\r\n        participantID: action.payload\r\n      };\r\n    case Q_KEYS:\r\n      return {\r\n        ...state,\r\n        questionKeys: action.payload\r\n      };\r\n    case NUM_Q:\r\n      return {\r\n        ...state,\r\n        numQ: action.payload\r\n      }\r\n    case FINAL_Q:\r\n      return {\r\n        ...state,\r\n        isFinalQ: action.payload\r\n      };\r\n    case ANSWER:\r\n      return {\r\n        ...state,\r\n        answer: [...state.answer, action.payload]\r\n      };\r\n    case ITEM_DATA:\r\n      return {\r\n        ...state,\r\n        fileContent: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n","import { combineReducers } from \"redux\";\r\nimport dataReducer from \"./dataReducer\";\r\n\r\nexport default combineReducers({\r\n  expt: dataReducer\r\n});","export const DB_INFO = \"DB_INFO\";\r\nexport const GET_EXPT = \"GET_EXPT\";\r\nexport const PART_ID = \"PART_ID\";\r\nexport const SEND_EXPT = \"SEND_EXPT\";\r\nexport const Q_KEYS = \"Q_KEYS\";\r\nexport const NUM_Q = \"NUM_Q\";\r\nexport const FINAL_Q = \"FINAL_Q\";\r\nexport const ANSWER = \"ANSWER\";\r\nexport const ITEM_DATA = \"ITEM_DATA\";","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware)\r\n    // ,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;","import axios from \"axios\";\r\nimport {\r\n  DB_INFO,\r\n  GET_EXPT,\r\n  PART_ID,\r\n  SEND_EXPT,\r\n  Q_KEYS,\r\n  NUM_Q,\r\n  FINAL_Q,\r\n  ANSWER,\r\n  ITEM_DATA\r\n} from \"./types\"\r\n\r\n// Input: name of a database, name of a collection \r\n// Output: a JSON object containing the input\r\n// Action: puts database - collection information into redux store so that \r\n//         it's easily accessible for all components\r\nexport const storeDBInfo = (which_database, which_collection) => dispatch => {\r\n  dispatch({\r\n    type: DB_INFO,\r\n    payload: {\r\n      db: which_database,\r\n      col: which_collection\r\n    }\r\n  })\r\n}\r\n\r\n// Input: name of a database, name of a study, name of an experiment\r\n// Output: a JSON object containing configuration data of the given experiment \r\n//         in the given study \r\n// Action: a GET request to get the output. \r\nexport const getExpt = (which_db, study_name, expt_name) => dispatch => {\r\n  const API_URL = 'https://test-api-615.herokuapp.com/api/feedback/' +\r\n    which_db + '/info/' + 'studyName-' + study_name;\r\n  axios\r\n    .get(API_URL)\r\n    .then(res => {\r\n      const experiments = res.data.experiments;\r\n      var thisExpt = {};\r\n      experiments.forEach(element => {\r\n        if (element.exptName == expt_name) {\r\n          thisExpt = element;\r\n        }\r\n      });\r\n      dispatch({\r\n        type: GET_EXPT,\r\n        payload: thisExpt\r\n      })\r\n    })\r\n}\r\n\r\n// Input: participant ID\r\n// Output: participant ID\r\n// Action: puts participant ID into redux store so that it's easily accessible \r\n//         for all components \r\nexport const storePartID = (part_id) => dispatch => {\r\n  dispatch({\r\n    type: PART_ID,\r\n    payload: part_id\r\n  })\r\n}\r\n\r\n// Input: name of a database, name of a collection, JSON object containing \r\n//        user responses\r\n// Output: NONE\r\n// Action: a POST request to send user response to the appropriate collection \r\n//         in Mongo database. \r\nexport const sendExpt = (which_db, which_col, dataToPOST) => dispatch => {\r\n  const API_URL = 'https://test-api-615.herokuapp.com/api/feedback/' +\r\n    which_db + \"/\" + which_col;\r\n  axios\r\n    .post(API_URL, dataToPOST)\r\n    .then(res => {\r\n      // console.log(res);\r\n    })\r\n}\r\n\r\n// Input: an array representing questions keys of an experiment\r\n// Output: the same array\r\n// Action: puts the array into redux store so that it's easily accessible for \r\n//         all components\r\nexport const storeQKeys = (keys) => dispatch => {\r\n  dispatch({\r\n    type: Q_KEYS,\r\n    payload: keys\r\n  })\r\n}\r\n\r\n// Input: a number representing the index of the questions keys array. \r\n//        This number tells Experiment.js what to display next\r\n// Output: the same number\r\n// Action: puts the number into redux store so that it's easily accessible \r\n//         for all components\r\nexport const setNumQ = (num) => dispatch => {\r\n  dispatch({\r\n    type: NUM_Q,\r\n    payload: num\r\n  })\r\n}\r\n\r\n// Input: a boolean indicating whether the next question to display is the \r\n//        last question. This boolean determines which type of <button> to show\r\n// Output: the same boolean\r\n// Action: puts the boolean into redux store so that it's easily accessible \r\n//         for all components\r\nexport const isFinalQ = (is) => dispatch => {\r\n  dispatch({\r\n    type: FINAL_Q,\r\n    payload: is\r\n  })\r\n}\r\n\r\n// Input: a string representing a question, any representing an answer\r\n// Output: a JSON object containing the inputs\r\n// Action: puts the object into redux store. Notice the redux reducer \r\n//         appends the answer to the existing state. In this way, ```Success.js``` can send all stored answers via API at the end of the experiment. \r\nexport const storeAnswer = (question, answer) => dispatch => {\r\n  dispatch({\r\n    type: ANSWER,\r\n    payload: {\r\n      que: question,\r\n      ans: answer\r\n    }\r\n  })\r\n}\r\n\r\n// ###DEPRECATED###\r\n// Reason: there's a lag in receiving the output, which causes errors when \r\n//         displaying experiment items. \r\n// Input: name of a database, name of an uploaded file whose content is a \r\n//        JSON object containing experiment item data\r\n// Output: the content of the file\r\n// Action: puts the output into redux store so that it's easily accessible \r\n//         for all components.\r\nexport const getItemData = (which_database, fileName) => dispatch => {\r\n  const API_URL = 'https://test-api-615.herokuapp.com/api/feedback/' +\r\n    which_database + \"/itemData\";\r\n  axios\r\n    .get(API_URL)\r\n    .then(res => {\r\n      const fileContent = res.data.filter(doc => doc.fileName == fileName)[0].fileContent\r\n      dispatch({\r\n        type: ITEM_DATA,\r\n        payload: fileContent\r\n      })\r\n    })\r\n}","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { \r\n  storeDBInfo,\r\n  storePartID, \r\n  getExpt,\r\n  storeQKeys,\r\n  setNumQ,\r\n  isFinalQ\r\n} \r\nfrom \"../actions/dataActions\";\r\n\r\n/**\r\n * This is what participants will see when they first take an experiment\r\n */\r\nclass EnterID extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ParticipantID: ''\r\n    }\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.showExpt = this.showExpt.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n\r\n    const username = this.props.match.params.username;\r\n    const studyExpt = this.props.match.params.expt;\r\n    // store the database - collection info into redux store to be readily \r\n    // accessible for all components\r\n    this.props.storeDBInfo(username, studyExpt);\r\n  }\r\n\r\n  /**\r\n   * Get experiment data (queried by database, studyName, and exptName)\r\n   */\r\n  getData() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.expt.split(\"-\")[0];\r\n    const exptName = this.props.match.params.expt.split(\"-\")[1];\r\n    this.props.getExpt(username, studyName, exptName);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  /**\r\n   * This method will lead participants to the first question of an experiment\r\n   */\r\n  showExpt() {\r\n    this.props.storePartID(this.state.ParticipantID);\r\n    const username = this.props.match.params.username;\r\n    const studyExpt = this.props.match.params.expt;\r\n    var questionKeys = [];\r\n    if (this.props.expt.exptToDisplay) {\r\n      const allKeys = Object.keys(this.props.expt.exptToDisplay);\r\n      console.log(allKeys);\r\n      // in the JSON file each question must have index q0, q1, q2, ... \r\n      questionKeys = allKeys.filter(str => str.charAt(0) == \"q\");\r\n      this.props.storeQKeys(questionKeys);\r\n    }\r\n    // Let the next question know if it's the final question\r\n    if (questionKeys.length == 1) {\r\n      this.props.isFinalQ(true);\r\n    }\r\n    this.props.setNumQ(0);\r\n    // Note that this.props.history can only be accessible if we use a React Router\r\n    this.props.history.push(\"/expt/\" + username + \"/\" + studyExpt + \r\n      \"/\" + questionKeys[0]);\r\n  }\r\n\r\n  render() {\r\n    const exptName = this.props.match.params.expt;\r\n      return (\r\n        <div className=\"container\">\r\n        Experiment name: <br/>\r\n        <b>{exptName}</b>\r\n        <br/><br/>\r\n        Enter your unique ID: <p></p>\r\n        <input type=\"text\" name=\"ParticipantID\" \r\n          value={this.state.ParticipantID} onChange={this.onChange}/>\r\n        <br/>\r\n        <input type=\"button\" className=\"btn\" value=\"Start Experiment\" \r\n          onClick={this.showExpt}/>\r\n        <br/><br/>\r\n        Note: once you click \"Ok\" for a question, you won't be\r\n        able to change your response. \r\n      </div>\r\n      )\r\n  }\r\n}\r\n\r\nEnterID.propTypes = {\r\n  storeDBInfo: PropTypes.func.isRequired,\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  storePartID: PropTypes.func.isRequired,\r\n  participantID: PropTypes.string.isRequired,\r\n  storeQKeys: PropTypes.func.isRequired,\r\n  setNumQ: PropTypes.func.isRequired,\r\n  isFinalQ: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n  participantID: state.participantID\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { storeDBInfo, storePartID, getExpt, storeQKeys, setNumQ, isFinalQ }\r\n)(EnterID);\r\n","import React, { Component } from 'react';\r\n\r\nclass HomePage extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>This is the home page</h1>\r\n        <h3>Experiments are accessible by experiment URLs given in Qualtrics Surveys</h3>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  getExpt,\r\n  storeAnswer\r\n} from \"../actions/dataActions\";\r\n\r\n// This component does the following:\r\n// - Display question\r\n// - Display an experiment item (in this case, a slider)\r\n// - Store answer into Redux store upon submission \r\nclass Slider extends Component {\r\n  constructor() {\r\n    // putting super() here so that we can use this.blahblah\r\n    super();\r\n    this.state = this.initialState;\r\n\r\n    this.resetState = this.resetState.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.showSlider = this.showSlider.bind(this);\r\n  }\r\n\r\n  get initialState() {\r\n    return {\r\n      submitted: false,\r\n      value: 0\r\n    };\r\n  }\r\n\r\n  resetState() {\r\n    this.setState(this.initialState);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { childRef } = this.props;\r\n    childRef(this);\r\n    this.getData();\r\n    this.props.setWhichItem(\"slider\");\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { childRef } = this.props;\r\n    childRef(undefined);\r\n  }\r\n\r\n  getData() {\r\n    const db = this.props.expt.dbInfo.db;\r\n    // there will be problems if user's study name / experiment name inclues \"-\"\r\n    const studyName = this.props.expt.dbInfo.col.split(\"-\")[0];\r\n    const exptName = this.props.expt.dbInfo.col.split(\"-\")[1];\r\n    this.props.getExpt(db, studyName, exptName);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  showSlider() {\r\n    return (\r\n      <div className=\"container\">\r\n        {this.props.question} <br/>\r\n        <input \r\n          type=\"range\"\r\n          min={this.props.lowRange}\r\n          max={this.props.highRange}\r\n          name=\"value\"\r\n          value={this.state.value}\r\n          onChange={this.onChange}\r\n        />\r\n        {this.state.value} <br/>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  onSubmit() {\r\n    const question = this.props.question;\r\n    const sliderCSVKey = this.props.sliderCSVKey;\r\n    // put answer in our redux store to be sent via API later\r\n    this.props.storeAnswer(sliderCSVKey, this.state.value);\r\n    this.setState({ submitted: true });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.showSlider()} <br/>\r\n        {\r\n          !this.state.submitted && \r\n          <div>\r\n            <input type=\"submit\" className=\"btn\" value=\"Ok\"\r\n              onClick={this.onSubmit}/> <br/>\r\n            <p style={{ color: \"grey\" }}>\r\n              Reminder: Once you click \"Ok\", your response to this question will be \r\n              recorded, and you won't be able to change your answer. \r\n            </p>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSlider.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  storeAnswer: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt, storeAnswer }\r\n)(Slider);","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  getExpt\r\n} from \"../actions/dataActions\";\r\n\r\nclass StaticText extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = this.initialState;\r\n    \r\n    // ###TODO###: change the name of the following binding if you see fit\r\n    // this binds the state to the showItem function below\r\n    this.showItem = this.showItem.bind(this);\r\n    // this.showImage = this.showImage.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  get initialState() {\r\n    return {\r\n      submitted: false\r\n    };\r\n  }\r\n\r\n  // additional setup to communicate with Experiment.js\r\n  componentDidMount() {\r\n    const { childRef } = this.props;\r\n    childRef(this);\r\n    this.getData();\r\n    this.props.setWhichItem(\"static-text\");\r\n  }\r\n\r\n  // additional setup to communicate with Experiment.js\r\n  componentWillUnmount() {\r\n    const { childRef } = this.props;\r\n    childRef(undefined);\r\n  }\r\n\r\n  // get experiment data from the database \r\n  getData() {\r\n    const db = this.props.expt.dbInfo.db;\r\n    const studyName = this.props.expt.dbInfo.col.split(\"-\")[0];\r\n    const exptName = this.props.expt.dbInfo.col.split(\"-\")[1];\r\n    this.props.getExpt(db, studyName, exptName);\r\n  }\r\n\r\n  // ###TODO###: add your own function(s) to show experiment item(s)\r\n  showItem() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div style={{ width: \"60%\", margin: \"auto\" }}>\r\n          <p style={{ textAlign: \"left\" }}>\r\n            {this.props.text}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  onSubmit() {\r\n    this.setState({ submitted: true });\r\n  }\r\n\r\n  // please render anything else you see fit\r\n  render() {\r\n    const imageURLs = this.props.imageURLs;\r\n    var Images = ({sth}) => <img src={''} />\r\n    if (imageURLs.length != 0) {\r\n      console.log(imageURLs);\r\n      Images = ({sth}) => (\r\n        imageURLs.map(imag => (\r\n          <div style={{ \r\n            width: \"30%\", \r\n            padding: \"10px\"\r\n          }}>\r\n            <img src={imag.parsedLink} style={{ width: \"100%\" }}/>\r\n          </div>\r\n        ))\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n        {this.showItem()} <br/>\r\n        <div style={{ \r\n          display: \"flex\", \r\n          flexDirection: \"row\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          flexWrap: \"wrap\" \r\n        }}>\r\n          <Images data={''}/>\r\n        </div>\r\n        {/* {\r\n          !this.state.submitted && \r\n          <div>\r\n            <input type=\"submit\" className=\"btn\" value=\"Ok\"\r\n              onClick={this.onSubmit}/> <br/>\r\n          </div>\r\n        } */}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n// Listing required functions / data\r\nStaticText.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired\r\n}\r\n\r\n// mapping Redux state to props that we can use in our component\r\n// expt contains all info from a given experiment \r\nconst mapStateToProps = state => ({\r\n  expt: state.expt\r\n})\r\n\r\n// connecting props to our component\r\n// export our component so that Experiment.js can use it \r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt }\r\n)(StaticText);","import React, { Component } from 'react';\r\nimport './NormalCurve.css';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  getExpt,\r\n  storeAnswer\r\n} from \"../actions/dataActions\";\r\nimport { forceCenter } from 'd3';\r\n\r\nclass NormalCurveSurvey extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.sliderRef = React.createRef();\r\n    this.rectRef = React.createRef();\r\n    this.svgRef = React.createRef();\r\n    this.areaRef = React.createRef();\r\n    this.lengthRef = React.createRef();\r\n    this.startPos1Ref = React.createRef();\r\n    this.startPos2Ref = React.createRef();\r\n    this.tagRef1 = React.createRef();\r\n    this.tagRef2 = React.createRef();\r\n\r\n    this.dotReturn = this.dotReturn.bind(this);\r\n    this.curveArea = this.curveArea.bind(this);\r\n    this.triMouseDown = this.triMouseDown.bind(this);\r\n    this.triDrag = this.triDrag.bind(this);\r\n    this.triUp = this.triUp.bind(this);\r\n    this.curveArea = this.curveArea.bind(this);\r\n    this.svgColReturn = this.svgColReturn.bind(this);\r\n    this.svgColReturn = this.svgColReturn.bind(this);\r\n    this.updateTag1 = this.updateTag1.bind(this);\r\n    this.updateTag2 = this.updateTag2.bind(this);\r\n    this.displayTag1 = this.displayTag1.bind(this);\r\n    this.displayTag2 = this.displayTag2.bind(this);\r\n    this.hideTag1 = this.hideTag1.bind(this);\r\n    this.hideTag2 = this.hideTag2.bind(this);\r\n    this.returnTri1 = this.returnTri1.bind(this);\r\n    this.returnTri2 = this.returnTri2.bind(this);\r\n\r\n    this.resetState = this.resetState.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.noAnswer = this.noAnswer.bind(this);\r\n\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  get initialState() {\r\n    const data = this.props.data;\r\n    // console.log(data);\r\n    const unitHeight = data[\"max-height\"];\r\n    const circRad = data[\"circle-radius\"];\r\n    const len1 = data[\"len1\"];\r\n    const len2 = data[\"len2\"];\r\n    const distancing = circRad * 4 - 1;\r\n    const height = (Math.ceil((distancing * unitHeight) / 50) + 1) * 50;\r\n\r\n    const colNumInit = data[\"axis-length\"];\r\n    const internalLength = colNumInit * distancing;\r\n    const edgeCol = Math.ceil(Math.max(len1, len2) / 2);\r\n    const edgeLength = Math.max(len1, len2) * distancing;\r\n\r\n    const ceilDist = height - 50;\r\n    const length = edgeLength + internalLength;\r\n    const colNum = Math.ceil(length / distancing);\r\n\r\n    const axisStart = Math.ceil(edgeLength / 2);\r\n    const axisStartCol = edgeCol;\r\n    // console.log(\"startCol\", axisStartCol);\r\n    const axisWidth = length - ((len1 / 2 + 1) * distancing + (len2 / 2 + 1) * distancing - 1);\r\n    const axisEndCol = internalLength / distancing;\r\n    const axisEnd = axisEndCol * distancing;\r\n\r\n    const triCent1 = Math.ceil(0.5 * len1) * distancing;\r\n    const triCent2 = Math.ceil(0.5 * len2) * distancing;\r\n    const triCentCol1 = Math.ceil(triCent1 / distancing);\r\n    const triCentCol2 = Math.ceil(triCent2 / distancing);\r\n    // console.log(\"triCentCol1: \", triCentCol1);\r\n    // console.log(\"triCentCol2: \", triCentCol2);\r\n\r\n    const variance1 = Math.abs(Math.ceil(len1 / 2) - axisStartCol);\r\n    const variance2 = Math.abs(Math.ceil(len2 / 2) - axisStartCol);\r\n\r\n    let edgeLim;\r\n    if (\"edgeLim\" in data) {\r\n      edgeLim = data[\"edgeLim\"];\r\n    }\r\n    else {\r\n      edgeLim = true;\r\n    }\r\n\r\n    const startPos1 = data[\"startPos1\"];\r\n    let distancing1 = startPos1 + variance1 - 1;\r\n    let col11 = startPos1 + variance1;\r\n    let col12 = startPos1 + len1 - 1;\r\n    let col11Rel = startPos1;\r\n\r\n    let variance = axisStartCol - variance1;\r\n    if (edgeLim) {\r\n      if (col11 < axisStartCol - 1) {\r\n        distancing1 = (axisStartCol - 1) * distancing;\r\n        col11 = 0;\r\n        col12 = len1 - 1;\r\n      }\r\n      else if (col11 + len1 + 1 > axisStartCol + axisEndCol) {\r\n        const endCol = axisEndCol - len1;\r\n        distancing1 = distancing * (axisStartCol + endCol - 1);\r\n        col11 = endCol;\r\n        col12 = endCol + len2 - 1;\r\n      }\r\n      else {\r\n        distancing1 = distancing * col11;\r\n        col11 = col11Rel - variance;\r\n        col12 = col11Rel - variance + len1 - 1;\r\n      }\r\n    }\r\n    else {\r\n      // col11 = col11 - 1;\r\n      if (col11 + triCentCol1 < axisStartCol) {\r\n        distancing1 = (variance1) * distancing;\r\n        col11 = 0;\r\n        col12 = len1 - 1;\r\n      }\r\n      else if (col11 + triCentCol1 > axisStartCol + axisEndCol) {\r\n        distancing1 = distancing * (variance1 + axisEndCol);\r\n        col11 = axisEndCol;\r\n        col12 = axisEndCol + len1 - 1;\r\n      }\r\n      else {\r\n        distancing1 = distancing * (col11);\r\n        col11 = col11Rel;\r\n        col12 = col11Rel + len1 - 1;\r\n      }\r\n    }\r\n\r\n    const startPos2 = data[\"startPos2\"];\r\n    let distancing2 = startPos2 + variance2 - 1;\r\n    let col21 = startPos2 + variance2;\r\n    let col22 = startPos2 + len2 - 1;\r\n    let col21Rel = startPos2;\r\n\r\n    variance = axisStartCol - variance2;\r\n    if (edgeLim) {\r\n      if (col21 < axisStartCol - 1) {\r\n        distancing2 = (axisStartCol - 1) * distancing;\r\n        col21 = 0;\r\n        col22 = len2 - 1;\r\n      }\r\n      else if (col21 + len2 + 1 > axisStartCol + axisEndCol) {\r\n        const endCol = axisEndCol - len2;\r\n        distancing2 = distancing * (axisStartCol + endCol);\r\n        col21 = endCol;\r\n        col22 = endCol + len2 - 1;\r\n      }\r\n      else {\r\n        distancing2 = distancing * col21;\r\n        col21 = col21Rel - variance;\r\n        col22 = col21Rel - variance + len2 - 1;\r\n      }\r\n    }\r\n    else {\r\n      // col21 = col21 - 1;\r\n      if (col21 + triCentCol2 < axisStartCol) {\r\n        distancing2 = (variance2) * distancing;\r\n        col21 = 0;\r\n        col22 = len2 - 1;\r\n      }\r\n      else if (col21 + triCentCol2 > axisStartCol + axisEndCol) {\r\n        distancing2 = distancing * (variance2 + axisEndCol - 1);\r\n        col21 = axisEndCol;\r\n        col22 = axisEndCol + len2 - 1;\r\n      }\r\n      else {\r\n        distancing2 = distancing * (col21);\r\n        col21 = col21Rel;\r\n        col22 = col21Rel + len2 - 1;\r\n      }\r\n    }\r\n\r\n    let colNumVal;\r\n    if (\"colNumVal\" in data) {\r\n      colNumVal = this.props.data[\"colNumVal\"];\r\n    }\r\n    else {\r\n      colNumVal = 1;\r\n    }\r\n\r\n    let tickNum;\r\n    let tickDist;\r\n    let rangeVal;\r\n    const axisLength = colNumInit * colNumVal;\r\n    // console.log(\"tickNum\", data[\"tickNum\"], axisLength % (parseInt(data[\"tickNum\"]) + 1) === 0);\r\n    if (\"tickNum\" in data && axisLength % (parseInt(data[\"tickNum\"]) + 1) === 0) {\r\n      tickNum = parseInt(data[\"tickNum\"]);\r\n      tickDist = colNumInit * distancing / (tickNum + 1);\r\n      rangeVal = axisLength / (tickNum + 1);\r\n    }\r\n    else {\r\n      tickNum = 0;\r\n      tickDist = axisLength;\r\n      rangeVal = axisLength;\r\n    }\r\n\r\n    let fixCurve1;\r\n    if (\"fixCurve1\" in data) {\r\n      fixCurve1 = data[\"fixCurve1\"];\r\n    }\r\n    else {\r\n      fixCurve1 = false;\r\n    }\r\n\r\n    let fixCurve2;\r\n    if (\"fixCurve2\" in data) {\r\n      fixCurve2 = data[\"fixCurve2\"];\r\n    }\r\n    else {\r\n      fixCurve2 = false;\r\n    }\r\n\r\n    let maxLength = len1;\r\n    if (len2 > len1) {\r\n      maxLength = len2;\r\n    }\r\n\r\n    let color1;\r\n    if (\"color1\" in data) {\r\n      color1 = data[\"color1\"];\r\n    }\r\n    else {\r\n      color1 = \"CornflowerBlue\";\r\n    }\r\n\r\n    let color2;\r\n    if (\"color2\" in data) {\r\n      color2 = data[\"color2\"];\r\n    }\r\n    else {\r\n      color2 = \"Crimson\";\r\n    }\r\n\r\n    return {\r\n      submitted: false,\r\n      axisLength: data[\"axis-length\"],\r\n      startPos1: data[\"startPos1\"],\r\n      startPos2: data[\"startPos2\"],\r\n      x: 0, y: 0, isDown: false,\r\n      rectX: 12.5,\r\n      down: false,\r\n      svgWidth: length,\r\n      svgHeight: height,\r\n      svgX: 6,\r\n      len1: len1,\r\n      colValHeiS: data[\"colValHeiS\"],\r\n      len2: len2,\r\n      colValHeiS2: data[\"colValHeiS2\"],\r\n      distancing: distancing,\r\n      distancing1 : distancing1,\r\n      distancing2: distancing2,\r\n      triCent1: triCentCol1 * distancing,\r\n      triCentCol1: triCentCol1,\r\n      triCent2: triCentCol2 * distancing,\r\n      triCentCol2: triCentCol2,\r\n      mousePointerRange: 0,\r\n      triDown: false,\r\n      col11: col11,\r\n      col12: col12,\r\n      col21: col21,\r\n      col22: col22,\r\n      colLim1: Math.round((length - (len1 * distancing)) / distancing),\r\n      colLim2: Math.round((length - (len2 * distancing)) / distancing),\r\n      overlapVals: data[\"overlapVals\"],\r\n      circRad: circRad,\r\n      ceilDist: ceilDist,\r\n      axisStart: axisStart,\r\n      axisStartCol: axisStartCol,\r\n      axisWidth: axisWidth,\r\n      axisEnd: axisEnd,\r\n      axisEndCol: axisEndCol,\r\n      edgeCol: edgeCol,\r\n      edgeLength: edgeLength,\r\n      colNum: colNumInit,\r\n      variance1: variance1,\r\n      variance2: variance2,\r\n      lowVal: this.props.data[\"lowVal\"],\r\n      showCoors: true,\r\n      colNumVal: colNumVal,\r\n      tickNum: tickNum,\r\n      tickDist: tickDist,\r\n      rangeVal: rangeVal,\r\n      edgeLim: edgeLim,\r\n      fixCurve1: fixCurve1,\r\n      fixCurve2: fixCurve2,\r\n      maxLength: maxLength,\r\n      color1: color1,\r\n      color2: color2\r\n    };\r\n  }\r\n\r\n  resetState() {\r\n    this.setState(this.initialState);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { childRef } = this.props;\r\n    childRef(this);\r\n    this.getData();\r\n    this.props.setWhichItem(\"normal-curve\");\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { childRef } = this.props;\r\n    childRef(undefined);\r\n  }\r\n\r\n  getData() {\r\n    const db = this.props.expt.dbInfo.db;\r\n    const studyName = this.props.expt.dbInfo.col.split(\"-\")[0];\r\n    const exptName = this.props.expt.dbInfo.col.split(\"-\")[1];\r\n    this.props.getExpt(db, studyName, exptName);\r\n  }\r\n\r\n  onSubmit() {\r\n    const question = this.props.questionNCKey;\r\n    const key1 = this.props.graph1legend;\r\n    const key2 = this.props.graph2legend;\r\n    const answer = {\r\n      [key1]: this.state.col11,\r\n      [key2]: this.state.col21,\r\n      area: this.areaRef.current.innerHTML\r\n    }\r\n    this.props.storeAnswer(question, answer);\r\n    this.setState({ submitted: true });\r\n  }\r\n\r\n  noAnswer() {\r\n    const question = this.props.questionNCKey;\r\n    const answer = \"Prefer Not to Answer\";\r\n    this.props.storeAnswer(question, answer);\r\n    this.setState({ submitted: true });\r\n  }\r\n\r\n  dotReturn(xPos, yPos) {\r\n    const xPosOrig = xPos;\r\n\r\n    const CX = this.state.distancing1 + this.state.distancing * (xPosOrig + 1) + this.state.circRad - this.state.maxLength + 10;\r\n    const CY = this.state.ceilDist - this.state.distancing * yPos + 10;\r\n\r\n    var hard = \r\n    [<circle \r\n    onMouseEnter={e => this.displayTag1(e)}\r\n    onMouseLeave={e => this.hideTag1(e)}\r\n    onMouseMove={e => this.updateTag1(e)} \r\n    className=\"icon circle1\" \r\n    stroke={this.state.color1}\r\n    fill={this.state.color1}\r\n    fillOpacity=\"0.3\" \r\n    strokeOpacity=\"0.3\" cx={CX} cy={CY} r={this.state.circRad}>\r\n    </circle>,\r\n    <circle\r\n    onMouseEnter={e => this.displayTag1(e)}\r\n    onMouseLeave={e => this.hideTag1(e)}\r\n    onMouseMove={e => this.updateTag1(e)} \r\n    className=\"icon circle1\" \r\n    stroke={this.state.color1}\r\n    fill={this.state.color1}\r\n    fillOpacity=\"0\" \r\n    strokeOpacity=\"0\" cx={CX} cy={CY} r={this.state.distancing}>\r\n    </circle>];\r\n\r\n    return hard;\r\n  }\r\n\r\n  dotReturn2(xPos, yPos) {\r\n    const xPosOrig = xPos;\r\n\r\n    const CX = this.state.distancing2 + this.state.distancing * (xPosOrig + 1) + this.state.circRad - this.state.maxLength + 10;\r\n    const CY = this.state.ceilDist - this.state.distancing * yPos + 10;\r\n\r\n    var hard = \r\n    [<circle \r\n    onMouseEnter={e => this.displayTag2(e)}\r\n    onMouseLeave={e => this.hideTag2(e)}\r\n    onMouseMove={e => this.updateTag2(e)} \r\n    className=\"icon circle2\" \r\n    stroke={this.state.color2}\r\n    fill={this.state.color2}\r\n    fillOpacity=\"0.3\" \r\n    strokeOpacity=\"0.3\" cx={CX} cy={CY} r={this.state.circRad}>\r\n    </circle>,\r\n    <circle\r\n    onMouseEnter={e => this.displayTag2(e)}\r\n    onMouseLeave={e => this.hideTag2(e)}\r\n    onMouseMove={e => this.updateTag2(e)} \r\n    className=\"icon circle2\" \r\n    stroke={this.state.color2}\r\n    fill={this.state.color2}\r\n    fillOpacity=\"0\" \r\n    strokeOpacity=\"0\" cx={CX} cy={CY} r={this.state.distancing}>\r\n    </circle>];\r\n\r\n    return hard;\r\n  }\r\n\r\n  returnTri1() {\r\n    if (this.state.fixCurve1) {\r\n      return (null);\r\n    }\r\n    else {\r\n      return (\r\n        <polygon\r\n            points={\r\n              [\r\n                [this.state.triCent1 + this.state.distancing1 - 15, this.state.ceilDist + 35],\r\n                [this.state.triCent1 + this.state.distancing1 + 15, this.state.ceilDist + 35],\r\n                [this.state.triCent1 + this.state.distancing1, this.state.ceilDist + 20]\r\n              ]\r\n            }\r\n            onMouseDown={(e, num) => this.triMouseDown(e, 1)}\r\n          />\r\n      )\r\n    }\r\n  }\r\n\r\n  returnTri2() {\r\n    if (this.state.fixCurve2) {\r\n      return (null);\r\n    }\r\n    else {\r\n      return (\r\n        <polygon\r\n            points={\r\n              [\r\n                [this.state.triCent2 + this.state.distancing2 - 15, this.state.ceilDist + 35],\r\n                [this.state.triCent2 + this.state.distancing2 + 15, this.state.ceilDist + 35],\r\n                [this.state.triCent2 + this.state.distancing2, this.state.ceilDist + 20]\r\n              ]\r\n            }\r\n            onMouseDown={(e, num) => this.triMouseDown(e, 2)}\r\n          />\r\n      )\r\n    }\r\n  }\r\n\r\n  svgColReturn(e, dragger) {\r\n    let distFromCent;\r\n    let variance;\r\n    if (dragger === 1) {\r\n      distFromCent = this.state.triCentCol1;\r\n      variance = this.state.variance1;\r\n    }\r\n    else if (dragger === 2) {\r\n      distFromCent = this.state.triCentCol2;\r\n      variance = this.state.variance2;\r\n    }\r\n    var svg = this.svgRef.current;\r\n    var pt = svg.createSVGPoint();\r\n    pt.x = e.clientX;\r\n    var svgP = pt.matrixTransform(svg.getScreenCTM().inverse());\r\n    e.preventDefault();\r\n    var x = svgP.x - distFromCent + this.state.mousePointerRange;\r\n    var col = Math.round((x - this.state.axisStart) / this.state.distancing) + variance;\r\n    var colRelative = Math.round((x - this.state.axisStart) / this.state.distancing) - 1;\r\n    return [col, colRelative];\r\n  }\r\n\r\n  svgColPlacement(col, colRelative, dragger) {\r\n    // console.log(col, colRelative);\r\n    // console.log(this.state.axisStartCol);\r\n    // console.log(this.state.axisStart);\r\n    if (this.state.edgeLim) {\r\n      if (dragger === 2) {\r\n        const variance = this.state.axisStartCol - this.state.variance2;\r\n        if (col < this.state.axisStartCol - 1) {\r\n          // console.log(\"edge\");\r\n          this.setState({ distancing2: (this.state.axisStartCol - 1) * this.state.distancing, col21: 0, col22: this.state.len2 - 1 });\r\n        }\r\n        else if (col + this.state.len2 + 1 > this.state.axisStartCol + this.state.axisEndCol) {\r\n          const endCol = this.state.axisEndCol - this.state.len2;\r\n          this.setState({ distancing2: this.state.distancing * (this.state.axisStartCol + endCol - 1), col21: endCol, col22: endCol + this.state.len2 - 1 })\r\n        }\r\n        else {\r\n          this.setState({ distancing2: this.state.distancing * col, col21: colRelative - variance, col22: colRelative - variance + this.state.len2 - 1 });\r\n        }\r\n        this.curveArea();\r\n      }\r\n      else if (dragger === 1) {\r\n        const variance = this.state.axisStartCol - this.state.variance1;\r\n        if (col < this.state.axisStartCol - 1) {\r\n          this.setState({ distancing1: (this.state.axisStartCol - 1) * this.state.distancing, col11: 0, col12: this.state.len1 - 1 });\r\n        }\r\n        else if (col + this.state.len1 + 1 > this.state.axisStartCol + this.state.axisEndCol) {\r\n          const endCol = this.state.axisEndCol - this.state.len1;\r\n          this.setState({ distancing1: this.state.distancing * (this.state.axisStartCol + endCol - 1), col11: endCol, col12: endCol + this.state.len1 - 1 })\r\n        }\r\n        else {\r\n          this.setState({ distancing1: this.state.distancing * col, col11: colRelative - variance, col12: colRelative - variance + this.state.len1 - 1 });\r\n        }\r\n        this.curveArea();\r\n      }\r\n    }\r\n    else {\r\n      col = col - 1;\r\n      if (dragger === 2) {\r\n        // colRelative = colRelative - this.state.axisStartCol + this.state.variance2;\r\n        if (col + this.state.triCentCol2 < this.state.axisStartCol) {\r\n          this.setState({ distancing2: (this.state.variance2) * this.state.distancing, col21: 0, col22: this.state.len2 - 1 });\r\n        }\r\n        else if (col + this.state.triCentCol2 > this.state.axisStartCol + this.state.axisEndCol) {\r\n          this.setState({ distancing2: this.state.distancing * (this.state.variance2 + this.state.axisEndCol), col21: this.state.axisEndCol, col22: this.state.axisEndCol + this.state.len2 - 1 })\r\n        }\r\n        else {\r\n          this.setState({ distancing2: this.state.distancing * col, col21: colRelative, col22: colRelative + this.state.len2 - 1 });\r\n        }\r\n        this.curveArea();\r\n      }\r\n      else if (dragger === 1) {\r\n        // colRelative = colRelative - this.state.axisStartCol + this.state.variance1;\r\n        if (col + this.state.triCentCol1 < this.state.axisStartCol) {\r\n          this.setState({ distancing1: (this.state.variance1) * this.state.distancing, col11: 0, col12: this.state.len1 - 1 });\r\n        }\r\n        else if (col + this.state.triCentCol1 > this.state.axisStartCol + this.state.axisEndCol) {\r\n          this.setState({ distancing1: this.state.distancing * (this.state.variance1 + this.state.axisEndCol), col11: this.state.axisEndCol, col12: this.state.axisEndCol + this.state.len1 - 1 })\r\n        }\r\n        else {\r\n          this.setState({ distancing1: this.state.distancing * col, col11: colRelative, col12: colRelative + this.state.len1 - 1 });\r\n        }\r\n        this.curveArea();\r\n      }\r\n    }\r\n  }\r\n\r\n  triMouseDown(e, num) {\r\n    if (e.type === \"mousedown\") {\r\n      e.preventDefault();\r\n      var svgPre = this.svgRef.current;\r\n      // Set mousePointerRange so that we know the distance\r\n      // from the mouse tip to the x-value of the triangle\r\n      // tip\r\n      var ptPre = svgPre.createSVGPoint();\r\n      ptPre.x = e.clientX;\r\n      var svgPPre = ptPre.matrixTransform(svgPre.getScreenCTM().inverse());\r\n      if (num === 1) {\r\n        this.setState(prevState => ({\r\n          // rectX : svgP.x,\r\n          triDown: num,\r\n          mousePointerRange: prevState.triCent1 + this.state.distancing1 - svgPPre.x\r\n        }));\r\n      }\r\n      else if (num === 2) {\r\n        this.setState(prevState => ({\r\n          triDown: num,\r\n          mousePointerRange: prevState.triCent2 + this.state.distancing2 - svgPPre.x\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  triDrag(e) {\r\n      e.preventDefault();\r\n      var dragger = this.state.triDown;\r\n      var cols = this.svgColReturn(e, dragger);\r\n      var col = cols[0];\r\n      var colRelative = cols[1]\r\n      this.svgColPlacement(col, colRelative, dragger);\r\n      this.curveArea();\r\n  }\r\n\r\n  triUp(e) {\r\n    if (this.state.triDown) {\r\n      this.setState({ triDown: false });\r\n    }\r\n  }\r\n\r\n  curveArea() {\r\n    let col11;\r\n    let col12;\r\n    let col21;\r\n    let col22;\r\n\r\n    if (this.state.edgeLim) {\r\n      col11 = this.state.col11;\r\n      col12 = this.state.col12;\r\n      col21 = this.state.col21;\r\n      col22 = this.state.col22;\r\n    }\r\n    else {\r\n      col11 = this.state.col11 + this.state.variance1;\r\n      col12 = this.state.col12 + this.state.variance1;\r\n      col21 = this.state.col21 + this.state.variance2;\r\n      col22 = this.state.col22 + this.state.variance2;\r\n    }\r\n\r\n    if (col11 > col22 || col12 < col21) {\r\n      this.areaRef.current.innerHTML = 0;\r\n    }\r\n    else {\r\n      this.areaRef.current.innerHTML = this.state.overlapVals[Math.abs(col22 - col11)];\r\n    }\r\n  }\r\n\r\n  updateTag1(e) {\r\n    e.preventDefault()\r\n    var x = e.clientX,\r\n        y = e.clientY;\r\n\r\n    const elem = this.tagRef1.current;\r\n    elem.style.top = (y + 5) + 'px';\r\n    elem.style.left = (x + 5) + 'px';\r\n  }\r\n\r\n  updateTag2(e) {\r\n    e.preventDefault();\r\n    var x = e.clientX,\r\n        y = e.clientY;\r\n\r\n    const elem = this.tagRef2.current;\r\n    elem.style.top = (y + 5) + 'px';\r\n    elem.style.left = (x + 5) + 'px';\r\n  }\r\n\r\n  displayTag1(e) {\r\n    e.preventDefault();\r\n    this.tagRef1.current.style.display = \"block\";\r\n  }\r\n\r\n  displayTag2(e) {\r\n    e.preventDefault();\r\n    this.tagRef2.current.style.display = \"block\";\r\n  }\r\n\r\n  hideTag1(e) {\r\n    e.preventDefault();\r\n    this.tagRef1.current.style.display = \"none\";\r\n  }\r\n\r\n  hideTag2(e) {\r\n    e.preventDefault();\r\n    this.tagRef2.current.style.display = \"none\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div \r\n        onMouseMove={e => this.triDrag(e)}\r\n        onMouseUp={e => this.triUp(e)}>\r\n        <div className=\"container\">\r\n          <h3>Question: </h3>\r\n          <div style={{ width: \"60%\", margin: \"auto\" }}>\r\n            <p style={{ textAlign: \"left\" }}>\r\n              {this.props.questionNC}\r\n            </p>\r\n          </div>\r\n        </div> \r\n        <svg width={this.state.svgWidth} height={this.state.svgHeight + 10} ref={this.svgRef}>\r\n          {/* <rect opacity=\"0.2\" width=\"100%\" height=\"100%\" fill=\"red\"/> */}\r\n          {[...Array(this.state.len1).keys()].map(\r\n            (col) =>\r\n              [...Array(this.state.colValHeiS[col]).keys()].map(\r\n                (row) => this.dotReturn(col, row)\r\n              )\r\n          )}\r\n          {[...Array(this.state.len2).keys()].map(\r\n            (col) =>\r\n              [...Array(this.state.colValHeiS2[col]).keys()].map(\r\n                (row) => this.dotReturn2(col, row)\r\n              )\r\n          )}\r\n          {/* <rect width={this.state.cursorWidth} fill=\"#000\" x={this.state.rectX} y=\"5\" height=\"150\"\r\n                    onMouseDown={e => this.dragMouseDown(e)}\r\n                    \r\n                    // onMouseMove={e => this.elementDrag(e)}\r\n                    ref={this.rectRef}\r\n                    ></rect> */}\r\n          <rect width={this.state.axisEnd}\r\n            height=\"2\"\r\n            fill=\"black\"\r\n            x={this.state.axisStartCol * this.state.distancing - 1}\r\n            y={this.state.ceilDist + 20} />\r\n          <rect width=\"2\"\r\n            height=\"20\"\r\n            fill=\"black\"\r\n            x={this.state.axisStartCol * this.state.distancing - 1}\r\n            y={this.state.ceilDist + 20} />\r\n          <rect width=\"2\"\r\n            height=\"20\"\r\n            fill=\"black\"\r\n            x={this.state.axisEnd + this.state.axisStartCol * this.state.distancing - 1}\r\n            y={this.state.ceilDist + 20} />\r\n          {/* triangle rendering below */}\r\n          {this.returnTri1()}\r\n          {this.returnTri2()}\r\n          {[...Array(this.state.tickNum).keys()].map(\r\n            (tick) =>\r\n              <rect\r\n                width=\"2\"\r\n                height=\"20\"\r\n                fill=\"black\"\r\n                x={this.state.axisStart + (this.state.tickDist * (tick + 1)) - 1} \r\n                y={this.state.ceilDist + 20}\r\n              />\r\n          )}\r\n          {[...Array(this.state.tickNum).keys()].map(\r\n            (tick) =>\r\n            <text \r\n            textAnchor=\"middle\" \r\n            x={this.state.axisStart + (this.state.tickDist * (tick + 1)) - 1} \r\n            y={this.state.ceilDist + 55}>\r\n              {this.state.lowVal + (this.state.rangeVal * (tick + 1))}\r\n            </text>\r\n          )}\r\n          <text text-anchor=\"middle\" x={this.state.axisStart} y={this.state.ceilDist + 55}>{this.state.lowVal}</text>\r\n          <text text-anchor=\"middle\" x={this.state.axisStart + this.state.axisEnd} y={this.state.ceilDist + 55}>{this.state.lowVal + this.state.colNum}</text>\r\n          Sorry, please use a different browser.\r\n        </svg>\r\n        <br />\r\n        <div class=\"boxed\">\r\n          <div class=\"color-box\" style={{ backgroundColor: this.state.color1 }}></div>\r\n          {this.props.graph1}\r\n          <br />\r\n          <div class=\"color-box\" style={{ backgroundColor: this.state.color2 }}></div>\r\n          {this.props.graph2}\r\n        </div>\r\n        <br />\r\n        <h4>First x-coordinate: {this.state.col11} | Second x-coordinate: {this.state.col21} </h4>\r\n        <span style={{ color: \"white\" }} ref={this.areaRef}></span>\r\n        {\r\n          !this.state.submitted && \r\n          <div>\r\n            <input type=\"submit\" className=\"extraPadding\" value=\"I Confirm My Answer\"\r\n              onClick={this.onSubmit}/> <br/>\r\n            <p style={{ color: \"grey\", width: \"40%\", margin: \"auto\" }}>\r\n              Reminder: Once you click \"I Confirm My Answer\", your response to this question \r\n              will be recorded, and you won't be able to change your answer. \r\n            </p> <br/>\r\n            <input type=\"submit\" className=\"btn\" value=\"I Prefer Not to Answer\"\r\n              onClick={this.noAnswer}/>\r\n          </div>\r\n        }\r\n        <span \r\n        className=\"tag1\" \r\n        ref={this.tagRef1}\r\n        >{this.props.graph1}</span>\r\n        \r\n        <span \r\n        className=\"tag2\" \r\n        ref={this.tagRef2}\r\n        >{this.props.graph2}</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nNormalCurveSurvey.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  storeAnswer: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt, storeAnswer }\r\n)(NormalCurveSurvey);","import React, { Component } from 'react';\r\nimport * as d3 from \"d3\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport './HistSlider.css';\r\n\r\nimport {\r\n  getExpt,\r\n  storeAnswer\r\n} from \"../actions/dataActions\";\r\n\r\nclass Histogram extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.sliderRef = React.createRef();\r\n    this.graphRef = React.createRef();\r\n    this.qRef = React.createRef();\r\n    this.minRef = React.createRef();\r\n    this.maxRef = React.createRef();\r\n\r\n    this.state = this.initialState;\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.resetState = this.resetState.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  get initialState() {\r\n    return {\r\n      submitted: false,\r\n      checked: false,\r\n      minVal: Number,\r\n      maxVal: Number,\r\n      sliderPos: Number\r\n    }\r\n  }\r\n\r\n    resetState() {\r\n    this.setState(this.initialState);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { childRef } = this.props;\r\n    childRef(this);\r\n    this.getData();\r\n    this.drawChart();\r\n    this.props.setWhichItem(\"threshold\");\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const { childRef } = this.props;\r\n    childRef(undefined);\r\n  }\r\n\r\n  getData() {\r\n    const db = this.props.expt.dbInfo.db;\r\n    const studyName = this.props.expt.dbInfo.col.split(\"-\")[0];\r\n    const exptName = this.props.expt.dbInfo.col.split(\"-\")[1];\r\n    this.props.getExpt(db, studyName, exptName);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  onSubmit() {\r\n    const question = this.props.questionHistKey;\r\n    const answer = this.state.sliderPos;\r\n    this.props.storeAnswer(question, answer);\r\n    this.setState({ submitted: true });\r\n  }\r\n\r\n  drawChart() {\r\n    const data = this.props.histData.data;\r\n\r\n    const svg = d3.select(this.graphRef.current).append(\"svg\")\r\n      .attr(\"width\", this.props.histData.width)\r\n      .attr(\"height\", this.props.histData.height)\r\n\r\n    svg.selectAll(\"rect\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", (d, i) => i * this.props.histData.width / data.length)\r\n      .attr(\"y\", (d, i) => this.props.histData.height - 10 * d)\r\n      .attr(\"width\", this.props.histData.width / data.length - 10)\r\n      .attr(\"height\", (d, i) => d * 10)\r\n      .attr(\"fill\", \"#4CAF50\")\r\n      .attr(\"opacity\", 0.5)\r\n\r\n    svg.selectAll(\"text\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => d)\r\n      .attr(\"x\", (d, i) => i * this.props.histData.width / data.length)\r\n      .attr(\"y\", (d, i) => this.props.histData.height - (10 * d) - 3)\r\n  }\r\n\r\n  render() {\r\n    const vertAlign = this.props.histData.height / 2;\r\n    // const step_size = this.props.width / this.props.data.length;\r\n    return (\r\n      <div>\r\n        <b>Question: </b> <br/>\r\n        {this.props.questionHist}\r\n        <div ref={this.graphRef}\r\n          style={{ \r\n            position: \"relative\", \r\n            width: this.props.histData.width, \r\n            margin: \"auto\" }}>\r\n          <div \r\n            style={{ \r\n              position: \"absolute\",\r\n              top: vertAlign}}>\r\n            <input type=\"range\" min={this.props.histLowRange} max={this.props.histHighRange} \r\n              className=\"hist-slider\" onChange={this.onChange}\r\n              name=\"sliderPos\" value={this.state.sliderPos}\r\n              step={this.props.histData.step} ref={this.sliderRef}\r\n              style={{ width: this.props.histData.width }}/>\r\n          </div>\r\n        </div>\r\n        {this.props.histLowRange}\r\n        <input type=\"range\" class=\"dummy-slider\" \r\n          style={{ width: this.props.histData.width }} onChange={this.onChange}\r\n          name=\"sliderPos\" value={this.state.sliderPos} \r\n          step={this.props.histData.step}\r\n          min={this.props.histLowRange} max={this.props.histHighRange} />\r\n        {this.props.histHighRange}\r\n        <br/>\r\n        Slider Position: {this.state.sliderPos}\r\n        \r\n        <br/><br/>\r\n          {\r\n          !this.state.submitted && \r\n          <div>\r\n            <input type=\"submit\" className=\"btn\" value=\"I Confirm My Answer\"\r\n              onClick={this.onSubmit}/> <br/>\r\n            <p style={{ color: \"grey\" }}>\r\n              Reminder: Once you click \"I Confirm My Answer\", your response to this question \r\n              will be recorded, and you won't be able to change your answer. \r\n            </p>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nHistogram.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  storeAnswer: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt, storeAnswer }\r\n)(Histogram);","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { \r\n  getExpt,\r\n  sendExpt,\r\n  setNumQ,\r\n  isFinalQ\r\n} from \"../actions/dataActions\";\r\n\r\nimport Slider from \"../items/Slider\";\r\nimport StaticText from \"../items/StaticText\";\r\n// import NormalCurve from \"../items/NormalCurve.jsx\";\r\nimport NormalCurveSurvey from \"../items/NormalCurveSurvey\";\r\nimport Histogram from \"../items/Histogram\";\r\n\r\n/**\r\n * This component displays an experiment question\r\n */\r\nclass Experiment extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      whichItem: \"\"\r\n    }\r\n\r\n    this.onNextQuestion = this.onNextQuestion.bind(this);\r\n    this.onFinalSubmit = this.onFinalSubmit.bind(this);\r\n    this.whichSubmit = this.whichSubmit.bind(this);\r\n    this.setWhichItem = this.setWhichItem.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.match.params.expt;\r\n    // if the store doesn't have participant ID, we ask participants to \r\n    // re-enter their ID \r\n    // (this happens if users close the tab then open it again or refresh)\r\n    if (!this.props.expt.participantID) {\r\n      alert(\"Please enter your unique ID\");\r\n      this.props.history.push(\"/expt/\" + username + \"/\" + expt);\r\n    }\r\n  }\r\n\r\n  // method to push user to the next question \r\n  // similar to an iterator\r\n  nextQuestion() {\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.match.params.expt;\r\n    const nextQ = this.props.expt.questionKeys[this.props.expt.numQ + 1];\r\n    const lastQ = this.props.expt.questionKeys[this.props.expt.questionKeys.length - 1];\r\n    // decide if the next question is the final question\r\n    if (nextQ == lastQ) {\r\n      this.props.isFinalQ(true);\r\n    }\r\n    this.props.setNumQ(this.props.expt.numQ + 1);\r\n    this.props.history.push(\"/expt/\" + username + \"/\" + expt + \r\n      \"/\" + nextQ.toString());\r\n  }\r\n\r\n  // will be triggered when the next question is not the final question\r\n  onNextQuestion() {\r\n    // ###TODO###: add more if statements below that follow the templates \r\n    if (this.childSlider) {\r\n      this.childSlider.resetState();\r\n      this.nextQuestion();\r\n    };\r\n    if (this.childNormalCurve) {\r\n      this.childNormalCurve.resetState();\r\n      this.nextQuestion();\r\n    }; \r\n    if (this.childStaticText) {\r\n      this.nextQuestion();\r\n    };\r\n  }\r\n\r\n  // will be triggered when the next question is the final question \r\n  onFinalSubmit() {\r\n    this.props.history.push(\"/success\");\r\n  }\r\n\r\n  // decides which button to show for the next question based whether the next\r\n  // question is the final question of the experiment\r\n  whichSubmit() {\r\n    return (\r\n      <div>\r\n        {\r\n          !this.props.expt.isFinalQ ? \r\n          <div>\r\n            {/* Please click \"I Confirm My Answer\" above before clicking \"Next Question\" <br/><br/> */}\r\n            <input type=\"submit\" className=\"extraPadding\" value=\"Next Question\"\r\n              onClick={this.onNextQuestion}/> \r\n            <br/><br/><br/><br/><br/><br/>\r\n          </div> :\r\n          <div>\r\n            {\r\n              this.state.whichItem == \"static-text\"\r\n              ?\r\n              <></>\r\n              :\r\n              <div>\r\n                Please click \"I Confirm My Answer\" above before clicking \"Submit\" <br/><br/>\r\n              </div>\r\n            }\r\n            <div>\r\n                This is the final page. <p></p>\r\n                <input type=\"submit\" className=\"extraPadding\" value=\"Submit\"\r\n                  onClick={this.onFinalSubmit}/>\r\n                <div>\r\n                  <br/><br/><br/><br/><br/><br/>\r\n                </div>\r\n              </div>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  getData() {\r\n    const username = this.props.match.params.username;\r\n    // there will be problems if user's study name / experiment name inclues \"-\"\r\n    const studyName = this.props.match.params.expt.split(\"-\")[0];\r\n    const exptName = this.props.match.params.expt.split(\"-\")[1];\r\n    this.props.getExpt(username, studyName, exptName);\r\n  }\r\n\r\n  /**\r\n   * Set the whichItem field of setState. \r\n   * This function is used by all experiment items to let Experiment.js know\r\n   * which item is currently on display.\r\n   * @param {String} itemName Name of the item that's currently on display\r\n   */\r\n  setWhichItem(itemName) {\r\n    this.setState({ whichItem: itemName });\r\n  }\r\n\r\n  displayExpt() {\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.expt.exptToDisplay;\r\n    const key = this.props.match.params.qKey;\r\n    if (expt[key]) {\r\n      // ###TODO### add more if statements here for your experiment type\r\n      // follow the following format\r\n      // ATTENTION: do NOT call methods (especially those associated with API)\r\n      // inside these cases. React keeps rendering displayExpt(), which means\r\n      // your method(s) will be called repeatedly => not good. \r\n      switch(expt[key][\"Type\"]) {\r\n        case \"slider\":\r\n          // this.setState({ whichItem: \"slider\" });\r\n          const lowRange = expt[key][\"lowRange\"];\r\n          const highRange = expt[key][\"highRange\"];\r\n          const question = expt[key][\"Question\"];\r\n          const sliderCSVKey = expt[key][\"slider-key\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <Slider childRef={ref => (this.childSlider = ref)}\r\n                question={question} sliderCSVKey={sliderCSVKey}\r\n                lowRange={lowRange} highRange={highRange} setWhichItem={this.setWhichItem}/>\r\n              <br/>\r\n              {/* keep the following line */}\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n          break;\r\n        case \"static-text\":\r\n          // this.setState({ whichItem: \"static-text\" });\r\n          const text = expt[key][\"Static Text\"];\r\n          var imageURLs = [];\r\n          if (Object.keys(expt[key]).includes(\"Images\")) {\r\n            imageURLs = expt[key][\"Images\"];\r\n          }\r\n          return (\r\n            <div className=\"container\">\r\n              <StaticText childRef={ref => (this.childStaticText = ref)}\r\n                text={text} imageURLs={imageURLs} setWhichItem={this.setWhichItem}/>\r\n              <br/>\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n        case \"normal-curve\":\r\n          // this.setState({ whichItem: \"normal-curve\" });\r\n          const questionNC = expt[key][\"Question\"];\r\n          const graph1 = expt[key][\"graph1key\"];\r\n          const graph2 = expt[key][\"graph2key\"];\r\n          const questionNCKey = expt[key][\"normal-curve-question-key\"];\r\n          const graph1legend = expt[key][\"normal-curve-legend-key1\"];\r\n          const graph2legend = expt[key][\"normal-curve-legend-key2\"];\r\n          const dataFileName = expt[key][\"FileName\"];\r\n          const dataFileContent = expt[key][\"FileContent\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <NormalCurveSurvey childRef={ref => (this.childNormalCurve = ref)} \r\n                questionNC={questionNC} graph1={graph1} graph2={graph2} \r\n                questionNCKey={questionNCKey} \r\n                graph1legend={graph1legend}\r\n                graph2legend={graph2legend}\r\n                fileName={dataFileName} data={dataFileContent} \r\n                setWhichItem={this.setWhichItem}/>\r\n              <br/>\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n        case \"threshold\":\r\n          // this.setState({ whichItem: \"threshold\" });\r\n          const questionHist = expt[key][\"Question\"];\r\n          const questionHistKey = expt[key][\"threshold-key\"];\r\n          const histLowRange = expt[key][\"lowRange\"];\r\n          const histHighRange = expt[key][\"highRange\"];\r\n          const histFileContent = expt[key][\"FileContent\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <Histogram childRef={ref => (this.childHistogram = ref)} \r\n                questionHist={questionHist} \r\n                questionHistKey={questionHistKey}\r\n                histLowRange={histLowRange}\r\n                histHighRange={histHighRange} histData={histFileContent} \r\n                setWhichItem={this.setWhichItem}/>\r\n              <br/>\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n        default: \r\n          return (<div>Unknown Experiment Type</div>)\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const exptName = this.props.match.params.expt;\r\n    const participant = this.props.expt.participantID;\r\n    return (\r\n      <div className=\"container\">\r\n      Experiment name: <br/>\r\n      <b>{exptName}</b>\r\n      <br/>\r\n      Participant ID: <br/>\r\n      <b>{participant}</b>\r\n      <br/><br/>\r\n      {this.displayExpt()}\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nExperiment.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  participantID: PropTypes.string.isRequired,\r\n  sendExpt: PropTypes.func.isRequired,\r\n  setNumQ: PropTypes.func.isRequired,\r\n  isFinalQ: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n  participantID: state.participantID\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt, sendExpt, setNumQ, isFinalQ }\r\n)(Experiment);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  sendExpt\r\n} from \"../actions/dataActions\"\r\n\r\n/**\r\n * Store answers\r\n * Lead participants to the demographics qualtrics survey\r\n */\r\nclass Success extends Component {\r\n  componentDidMount() {\r\n    // console.log(this.props);\r\n    const username = this.props.expt.dbInfo.db;\r\n    const expt = this.props.expt.dbInfo.col;\r\n    // console.log(this.props.expt.exptToDisplay);\r\n    if (!this.props.expt.answer.length == 0) {\r\n      const finalObj = {\r\n        participantID: this.props.expt.participantID\r\n      }\r\n      this.props.expt.answer.map(entry => {\r\n        finalObj[entry.que] = entry.ans\r\n      })\r\n      finalObj[\"condition\"] = this.props.expt.exptToDisplay.condition;\r\n      // console.log(finalObj);\r\n      this.props.sendExpt(username, expt, finalObj);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const link = this.props.expt.exptToDisplay.link;\r\n    const participantID = this.props.expt.participantID;\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Thank you for your submission!</h1> <br/>\r\n        You are <b>67%</b> done with the experiment! Now you will need to:  <br/><br/>\r\n        1. Please copy your ID shown below: <br/>\r\n        <b>{participantID}</b> <br/> \r\n        2. Please click on this <a href={link} target=\"_blank\">link</a>, paste your ID in the first page and complete the final survey. \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nSuccess.propTypes = {\r\n  sendExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { sendExpt }\r\n)(Success);\r\n","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { \r\n  storeDBInfo,\r\n  storePartID, \r\n  getExpt,\r\n  storeQKeys,\r\n  setNumQ,\r\n  isFinalQ\r\n} \r\nfrom \"../actions/dataActions\";\r\n\r\n/**\r\n * A preview version for researchers. \r\n */\r\nclass PreviewEnterID extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ParticipantID: ''\r\n    }\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.showExpt = this.showExpt.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n\r\n    const username = this.props.match.params.username;\r\n    const studyExpt = this.props.match.params.expt;\r\n    this.props.storeDBInfo(username, studyExpt);\r\n  }\r\n\r\n  getData() {\r\n    const username = this.props.match.params.username;\r\n    const studyName = this.props.match.params.expt.split(\"-\")[0];\r\n    const exptName = this.props.match.params.expt.split(\"-\")[1];\r\n    this.props.getExpt(username, studyName, exptName);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  showExpt() {\r\n    this.props.storePartID(this.state.ParticipantID);\r\n    const username = this.props.match.params.username;\r\n    const studyExpt = this.props.match.params.expt;\r\n    var questionKeys = [];\r\n    if (this.props.expt.exptToDisplay) {\r\n      const allKeys = Object.keys(this.props.expt.exptToDisplay);\r\n      console.log(allKeys);\r\n      // in the JSON file each question must have index q0, q1, q2, ... \r\n      questionKeys = allKeys.filter(str => str.charAt(0) == \"q\");\r\n      this.props.storeQKeys(questionKeys);\r\n    }\r\n    // console.log(questionKeys);\r\n    if (questionKeys.length == 1) {\r\n      this.props.isFinalQ(true);\r\n    }\r\n    this.props.setNumQ(0);\r\n    this.props.history.push(\"/preview/\" + username + \"/\" + studyExpt + \r\n      \"/\" + questionKeys[0]);\r\n  }\r\n\r\n  render() {\r\n    const exptName = this.props.match.params.expt;\r\n      return (\r\n        <div className=\"container\">\r\n        Experiment name: <br/>\r\n        <b>{exptName}</b>\r\n        <br/><br/>\r\n        Enter your unique ID: <p></p>\r\n        <input type=\"text\" name=\"ParticipantID\" \r\n          value={this.state.ParticipantID} onChange={this.onChange}/>\r\n        <br/>\r\n        <input type=\"button\" className=\"btn\" value=\"Start Experiment\" \r\n          onClick={this.showExpt}/>\r\n        <br/><br/>\r\n        Hi Researchers! You may enter any ID to preview your experiment. <br/>\r\n        Note: experiment preview will <b>NOT</b> record any data. \r\n      </div>\r\n      )\r\n  }\r\n}\r\n\r\nPreviewEnterID.propTypes = {\r\n  storeDBInfo: PropTypes.func.isRequired,\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  storePartID: PropTypes.func.isRequired,\r\n  participantID: PropTypes.string.isRequired,\r\n  storeQKeys: PropTypes.func.isRequired,\r\n  setNumQ: PropTypes.func.isRequired,\r\n  isFinalQ: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n  participantID: state.participantID\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { storeDBInfo, storePartID, getExpt, storeQKeys, setNumQ, isFinalQ }\r\n)(PreviewEnterID);\r\n","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { \r\n  getExpt,\r\n  sendExpt,\r\n  setNumQ,\r\n  isFinalQ\r\n} from \"../actions/dataActions\";\r\n\r\nimport Slider from \"../items/Slider\";\r\nimport StaticText from \"../items/StaticText\";\r\n// import NormalCurve from \"../items/NormalCurve.jsx\";\r\nimport NormalCurveSurvey from \"../items/NormalCurveSurvey\";\r\nimport Histogram from \"../items/Histogram\";\r\n\r\n/**\r\n * A preview version for researchers.\r\n * Note that data is put into the react store, but the final page doesn't \r\n * POST data to database. \r\n */\r\nclass PreviewExpt extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      whichItem: \"\"\r\n    }\r\n\r\n    this.onNextQuestion = this.onNextQuestion.bind(this);\r\n    this.onFinalSubmit = this.onFinalSubmit.bind(this);\r\n    this.whichSubmit = this.whichSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.match.params.expt;\r\n    if (!this.props.expt.participantID) {\r\n      alert(\"Please enter your unique ID\");\r\n      this.props.history.push(\"/preview/\" + username + \"/\" + expt);\r\n    }\r\n  }\r\n\r\n  // method to push user to the next question \r\n  nextQuestion() {\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.match.params.expt;\r\n    const nextQ = this.props.expt.questionKeys[this.props.expt.numQ + 1];\r\n    const lastQ = this.props.expt.questionKeys[this.props.expt.questionKeys.length - 1];\r\n    if (nextQ == lastQ) {\r\n      this.props.isFinalQ(true);\r\n    }\r\n    this.props.setNumQ(this.props.expt.numQ + 1);\r\n    this.props.history.push(\"/preview/\" + username + \"/\" + expt + \r\n      \"/\" + nextQ.toString());\r\n  }\r\n\r\n  // will be triggered when the next question is not the final question\r\n  onNextQuestion() {\r\n    // ###TODO###: add more if statements below that follow the templates \r\n    if (this.childSlider) {\r\n      this.childSlider.resetState();\r\n      this.nextQuestion();\r\n    };\r\n    if (this.childNormalCurve) {\r\n      this.childNormalCurve.resetState();\r\n      this.nextQuestion();\r\n    }; \r\n    if (this.childStaticText) {\r\n      this.nextQuestion();\r\n    };\r\n  }\r\n\r\n  // will be triggered when the next question is the final question \r\n  onFinalSubmit() {\r\n    this.props.history.push(\"/previewSuccess\");\r\n  }\r\n\r\n  // decides which button to show for the next question based whether the next\r\n  // question is the final question of the experiment\r\n  whichSubmit() {\r\n    return (\r\n      <div>\r\n        {\r\n          !this.props.expt.isFinalQ ? \r\n          <div>\r\n            {/* Please click \"I Confirm My Answer\" above before clicking \"Next Question\" <br/><br/> */}\r\n            <input type=\"submit\" className=\"extraPadding\" value=\"Next Question\"\r\n              onClick={this.onNextQuestion}/>\r\n          </div> :\r\n          <div>\r\n            Please click \"I Confirm My Answer\" above before clicking \"Submit\" <br/><br/>\r\n            This is the final question. <p></p>\r\n            <input type=\"submit\" className=\"extraPadding\" value=\"Submit\"\r\n              onClick={this.onFinalSubmit}/>\r\n            <div>\r\n              <br/><br/><br/><br/><br/><br/>\r\n            </div>\r\n          </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  getData() {\r\n    const username = this.props.match.params.username;\r\n    // there will be problems if user's study name / experiment name inclues \"-\"\r\n    const studyName = this.props.match.params.expt.split(\"-\")[0];\r\n    const exptName = this.props.match.params.expt.split(\"-\")[1];\r\n    this.props.getExpt(username, studyName, exptName);\r\n  }\r\n\r\n  displayExpt() {\r\n    const username = this.props.match.params.username;\r\n    const expt = this.props.expt.exptToDisplay;\r\n    const key = this.props.match.params.qKey;\r\n    if (expt[key]) {\r\n      // ###TODO### add more if statements here for your experiment type\r\n      // follow the following format\r\n      // ATTENTION: do NOT call methods (especially those associated with API)\r\n      // inside these cases. React keeps rendering displayExpt(), which means\r\n      // your method(s) will be called repeatedly => not good. \r\n      switch(expt[key][\"Type\"]) {\r\n        case \"slider\":\r\n          const lowRange = expt[key][\"lowRange\"];\r\n          const highRange = expt[key][\"highRange\"];\r\n          const question = expt[key][\"Question\"];\r\n          const sliderCSVKey = expt[key][\"slider-key\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <Slider childRef={ref => (this.childSlider = ref)}\r\n                question={question} sliderCSVKey={sliderCSVKey}\r\n                lowRange={lowRange} highRange={highRange} />\r\n              <br/>\r\n              {/* keep the following line */}\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n          break;\r\n        case \"static-text\":\r\n          const text = expt[key][\"Static Text\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <StaticText childRef={ref => (this.childStaticText = ref)}\r\n                text={text}/>\r\n              <br/>\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n        case \"normal-curve\":\r\n          const questionNC = expt[key][\"Question\"];\r\n          const graph1 = expt[key][\"graph1key\"];\r\n          const graph2 = expt[key][\"graph2key\"];\r\n          const questionNCKey = expt[key][\"normal-curve-question-key\"];\r\n          const graph1legend = expt[key][\"normal-curve-legend-key1\"];\r\n          const graph2legend = expt[key][\"normal-curve-legend-key2\"];\r\n          const dataFileName = expt[key][\"FileName\"];\r\n          const dataFileContent = expt[key][\"FileContent\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <NormalCurveSurvey childRef={ref => (this.childNormalCurve = ref)} \r\n                questionNC={questionNC} graph1={graph1} graph2={graph2} \r\n                questionNCKey={questionNCKey} \r\n                graph1legend={graph1legend}\r\n                graph2legend={graph2legend}\r\n                fileName={dataFileName} data={dataFileContent} />\r\n              <br/>\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n        case \"threshold\":\r\n          const questionHist = expt[key][\"Question\"];\r\n          const questionHistKey = expt[key][\"threshold-key\"];\r\n          const histLowRange = expt[key][\"lowRange\"];\r\n          const histHighRange = expt[key][\"highRange\"];\r\n          const histFileContent = expt[key][\"FileContent\"];\r\n          return (\r\n            <div className=\"container\">\r\n              <Histogram childRef={ref => (this.childHistogram = ref)} \r\n                questionHist={questionHist} \r\n                questionHistKey={questionHistKey}\r\n                histLowRange={histLowRange}\r\n                histHighRange={histHighRange} histData={histFileContent} />\r\n              <br/>\r\n              <this.whichSubmit />\r\n            </div>\r\n          )\r\n        default: \r\n          return (<div>Unknown Experiment Type</div>)\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const exptName = this.props.match.params.expt;\r\n    const participant = this.props.expt.participantID;\r\n    return (\r\n      <div className=\"container\">\r\n      Experiment name: <br/>\r\n      <b>{exptName}</b>\r\n      <br/>\r\n      Participant ID: <br/>\r\n      <b>{participant}</b>\r\n      <br/><br/>\r\n      {this.displayExpt()}\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nPreviewExpt.propTypes = {\r\n  getExpt: PropTypes.func.isRequired,\r\n  expt: PropTypes.object.isRequired,\r\n  participantID: PropTypes.string.isRequired,\r\n  sendExpt: PropTypes.func.isRequired,\r\n  setNumQ: PropTypes.func.isRequired,\r\n  isFinalQ: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n  participantID: state.participantID\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { getExpt, sendExpt, setNumQ, isFinalQ }\r\n)(PreviewExpt);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\n/**\r\n * A preview version for researchers. \r\n * Note that data is never submitted to API. \r\n */\r\nclass PreviewSuccess extends Component {\r\n  componentDidMount() {\r\n    // console.log(this.props);\r\n    const username = this.props.expt.dbInfo.db;\r\n    const expt = this.props.expt.dbInfo.col;\r\n    if (!this.props.expt.answer.length == 0) {\r\n      const finalObj = {\r\n        participantID: this.props.expt.participantID\r\n      }\r\n      this.props.expt.answer.map(entry => {\r\n        finalObj[entry.que] = entry.ans\r\n      })\r\n      console.log(finalObj);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const link = this.props.expt.exptToDisplay.link;\r\n    const participantID = this.props.expt.participantID;\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Thank you for your submission!</h1> <br/>\r\n        You are <b>67%</b> done with the experiment! Now you will need to:  <br/><br/>\r\n        1. Please copy your ID shown below: <br/>\r\n        <b>{participantID}</b> <br/> \r\n        2. Please click on this <a href={link} target=\"_blank\">link</a>, paste your ID in the first page and complete the final survey. \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nPreviewSuccess.propTypes = {\r\n  expt: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  expt: state.expt,\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { }\r\n)(PreviewSuccess);\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Switch, HashRouter } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nimport EnterID from \"./components/EnterID\";\r\nimport HomePage from \"./components/HomePage\";\r\nimport Experiment from \"./components/Experiment\";\r\nimport Success from \"./components/Success\";\r\n\r\nimport PreviewEnterID from \"./components/PreviewEnterID\";\r\nimport PreviewExpt from \"./components/PreviewExpt\";\r\nimport PreviewSuccess from \"./components/PreviewSuccess\"\r\n\r\nimport NormalCurveSurvey from \"./items/NormalCurveSurvey\";\r\nconst data = require('./inputDataPy2.json');\r\nconst data2 = require('./inputDataPy4.json');\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <HashRouter basename=\"/participant-app/\">\r\n        <div className=\"App\">\r\n          <Route exact path=\"/\" component={HomePage}/>\r\n          {/* <Route \r\n          exact path=\"/\" \r\n          component={\r\n            () => <NormalCurveSurvey data={data2} graph1=\"green\" graph2=\"red\" /> \r\n            }/> */}\r\n          <Route exact path=\"/success\" component={Success}/>\r\n          <Route exact path=\"/expt/:username/:expt\" component={EnterID}/>\r\n          <Route exact path=\"/expt/:username/:expt/:qKey\" component={Experiment}/>\r\n\r\n          <Route exact path=\"/previewSuccess\" component={PreviewSuccess}/>\r\n          <Route exact path=\"/preview/:username/:expt\" component={PreviewEnterID}/>\r\n          <Route exact path=\"/preview/:username/:expt/:qKey\" component={PreviewExpt}/>\r\n        </div>\r\n      </HashRouter>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}